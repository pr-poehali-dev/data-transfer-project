import { useState, useEffect, useRef } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';
import { Badge } from '@/components/ui/badge';
import QrScanner from 'qr-scanner';

interface FileData {
  id: string;
  name: string;
  size: number;
  type: string;
  date: string;
  data: string;
}

interface ReceiveScreenProps {
  onFileReceived: () => void;
}

export default function ReceiveScreen({ onFileReceived }: ReceiveScreenProps) {
  const [isNFCSupported, setIsNFCSupported] = useState(false);
  const [isNFCScanning, setIsNFCScanning] = useState(false);
  const [isQRScanning, setIsQRScanning] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const qrScannerRef = useRef<QrScanner | null>(null);

  useEffect(() => {
    if ('NDEFReader' in window) {
      setIsNFCSupported(true);
    }
  }, []);

  useEffect(() => {
    return () => {
      if (qrScannerRef.current) {
        qrScannerRef.current.destroy();
      }
    };
  }, []);

  const startNFCScanning = async () => {
    if (!isNFCSupported) {
      toast.error('NFC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', {
        description: '–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç NFC',
      });
      return;
    }

    try {
      setIsNFCScanning(true);
      const ndef = new (window as any).NDEFReader();
      
      toast.info('–û–∂–∏–¥–∞–Ω–∏–µ NFC...', {
        description: '–ü–æ–¥–Ω–µ—Å–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ NFC-–º–µ—Ç–∫–µ',
        duration: 10000,
      });

      await ndef.scan();

      ndef.addEventListener('reading', ({ message }: any) => {
        const decoder = new TextDecoder();
        for (const record of message.records) {
          if (record.recordType === 'text') {
            const textData = decoder.decode(record.data);
            try {
              const fileData = JSON.parse(textData);
              
              const savedFiles = JSON.parse(localStorage.getItem('received-files') || '[]');
              const exists = savedFiles.some((f: FileData) => f.id === fileData.id);
              
              if (!exists) {
                savedFiles.push(fileData);
                localStorage.setItem('received-files', JSON.stringify(savedFiles));
                localStorage.setItem(`file-${fileData.id}`, fileData.data);
                
                toast.success('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! üéâ', {
                  description: `${fileData.name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω`,
                });
                
                onFileReceived();
              } else {
                toast.info('–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', {
                  description: `${fileData.name} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ`,
                });
              }
            } catch (e) {
              console.error('Error parsing NFC data:', e);
              toast.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', {
                description: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö NFC',
              });
            }
          }
        }
      });

    } catch (error: any) {
      console.error('NFC Scan Error:', error);
      if (error.name === 'NotAllowedError') {
        toast.error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω', {
          description: '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ NFC –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö',
        });
      } else if (error.name === 'NotSupportedError') {
        toast.error('NFC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', {
          description: '–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web NFC',
        });
      } else {
        toast.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è NFC', {
          description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
        });
      }
      setIsNFCScanning(false);
    }
  };

  const stopNFCScanning = () => {
    setIsNFCScanning(false);
    toast.dismiss();
    toast.info('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  };

  const startQRScanning = async () => {
    if (!videoRef.current) return;

    try {
      setIsQRScanning(true);

      const qrScanner = new QrScanner(
        videoRef.current,
        (result) => {
          try {
            const fileData = JSON.parse(result.data);
            
            const savedFiles = JSON.parse(localStorage.getItem('received-files') || '[]');
            const exists = savedFiles.some((f: any) => f.id === fileData.id);
            
            if (!exists) {
              savedFiles.push(fileData);
              localStorage.setItem('received-files', JSON.stringify(savedFiles));
              localStorage.setItem(`file-${fileData.id}`, fileData.data);
              
              toast.success('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! üéâ', {
                description: `${fileData.name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω`,
              });
              
              stopQRScanning();
              onFileReceived();
            } else {
              toast.info('–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
              stopQRScanning();
            }
          } catch (e) {
            console.error('Error parsing QR data:', e);
            toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π QR-–∫–æ–¥', {
              description: '–≠—Ç–æ –Ω–µ QR-–∫–æ–¥ —Å —Ñ–∞–π–ª–æ–º',
            });
          }
        },
        {
          highlightScanRegion: true,
          highlightCodeOutline: true,
        }
      );

      qrScannerRef.current = qrScanner;
      await qrScanner.start();

      toast.info('–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥', {
        description: '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥',
      });

    } catch (error: any) {
      console.error('QR Scanner Error:', error);
      toast.error('–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã', {
        description: '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ',
      });
      setIsQRScanning(false);
    }
  };

  const stopQRScanning = () => {
    if (qrScannerRef.current) {
      qrScannerRef.current.stop();
      qrScannerRef.current.destroy();
      qrScannerRef.current = null;
    }
    setIsQRScanning(false);
    toast.dismiss();
  };

  return (
    <div className="min-h-[calc(100vh-120px)] p-6">
      <div className="w-full max-w-md mx-auto space-y-6">
        <div className="text-center space-y-2">
          <div className="flex items-center justify-center gap-2">
            <h2 className="text-2xl font-semibold tracking-tight">–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª</h2>
            {isNFCSupported && (
              <Badge variant="secondary" className="bg-primary/10 text-primary border-primary/20">
                <Icon name="Nfc" size={14} className="mr-1" />
                NFC
              </Badge>
            )}
          </div>
          <p className="text-sm text-muted-foreground">
            –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
          </p>
        </div>

        <Card className="p-8">
          <div className="flex flex-col items-center gap-6">
            {isQRScanning ? (
              <div className="w-full max-w-sm aspect-square rounded-2xl overflow-hidden bg-black relative">
                <video
                  ref={videoRef}
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 border-4 border-primary/50 rounded-2xl pointer-events-none"></div>
              </div>
            ) : (
              <div className="w-32 h-32 rounded-full bg-primary/10 flex items-center justify-center relative">
                {isNFCScanning ? (
                  <>
                    <div className="absolute inset-0 rounded-full bg-primary/20 animate-ping"></div>
                    <Icon name="Nfc" size={64} className="text-primary relative z-10 animate-pulse" />
                  </>
                ) : (
                  <Icon name="Download" size={64} className="text-primary" />
                )}
              </div>
            )}

            {isQRScanning ? (
              <div className="text-center space-y-2">
                <p className="text-lg font-medium">–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...</p>
                <p className="text-sm text-muted-foreground">
                  –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥
                </p>
              </div>
            ) : isNFCScanning ? (
              <div className="text-center space-y-2">
                <p className="text-lg font-medium">–û–∂–∏–¥–∞–Ω–∏–µ NFC...</p>
                <p className="text-sm text-muted-foreground">
                  –ü–æ–¥–Ω–µ—Å–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ –º–µ—Ç–∫–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
                </p>
              </div>
            ) : (
              <div className="text-center space-y-2">
                <p className="text-lg font-medium">–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É</p>
                <p className="text-sm text-muted-foreground">
                  –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                </p>
              </div>
            )}
          </div>
        </Card>

        <div className="space-y-3">
          {isQRScanning ? (
            <Button
              onClick={stopQRScanning}
              variant="destructive"
              className="w-full h-14 text-base font-semibold rounded-2xl"
              size="lg"
            >
              <Icon name="X" size={20} className="mr-2" />
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </Button>
          ) : isNFCScanning ? (
            <Button
              onClick={stopNFCScanning}
              variant="destructive"
              className="w-full h-14 text-base font-semibold rounded-2xl"
              size="lg"
            >
              <Icon name="X" size={20} className="mr-2" />
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </Button>
          ) : (
            <>
              <Button
                onClick={startQRScanning}
                className="w-full h-14 text-base font-semibold rounded-2xl"
                size="lg"
              >
                <Icon name="QrCode" size={20} className="mr-2" />
                –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥
              </Button>

              {isNFCSupported && (
                <Button
                  onClick={startNFCScanning}
                  variant="outline"
                  className="w-full h-14 text-base font-semibold rounded-2xl"
                  size="lg"
                >
                  <Icon name="Nfc" size={20} className="mr-2" />
                  –ü—Ä–∏–Ω—è—Ç—å —á–µ—Ä–µ–∑ NFC
                </Button>
              )}
            </>
          )}
        </div>

        <div className="text-center text-xs text-muted-foreground">
          <p>QR-–∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</p>
          {isNFCSupported && (
            <p className="mt-1">NFC –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏</p>
          )}
        </div>
      </div>
    </div>
  );
}
